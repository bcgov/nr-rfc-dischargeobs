Help on module NRUtil.NRObjStoreUtil in NRUtil:

NNAAMMEE
    NRUtil.NRObjStoreUtil

DDEESSCCRRIIPPTTIIOONN
    Utility module to make it easy to query and publish individual objects in
    a bucket.
    
    Works with constant file that makes the following env vars available:
    OBJ_STORE_BUCKET    - Bucket name
    OBJ_STORE_SECRET    - account secret access key (to access bucket)
    OBJ_STORE_USER      - account name / access key id
    OBJ_STORE_HOST      - object store host

CCLLAASSSSEESS
    builtins.object
        CalcETags
        ObjectStoragePathLib
        ObjectStoreUtil
            ObjectStoreDirectorySync
    
    class CCaallccEETTaaggss(builtins.object)
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ccaallcc__eettaagg(self, inputfile, partsize)
     |  
     |  eettaagg__iiss__vvaalliidd(self, inFilePath, s3eTag)
     |  
     |  ffaaccttoorr__ooff__11MMBB(self, filesize, num_parts)
     |  
     |  ppoossssiibbllee__ppaarrttssiizzeess(self, filesize, num_parts)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OObbjjeeccttSSttoorraaggeePPaatthhLLiibb(builtins.object)
     |  ObjectStoragePathLib(obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None)
     |  
     |  class that wrap some functions to clean up file paths when working with
     |  object storage.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__oobbjj__ssttoorree__ppaatthh(self, src_path: str, ostore_path: str, src_root_dir: str, prepend_bucket: bool = True, include_leading_slash: bool = False)
     |      Gets the source file path, calculates the destination path for
     |      use when referring to the destination location using the minio api.
     |      
     |      :param src_path: the source path referring to the file that is to be
     |          copied to object storage
     |      :param src_root_dir: the path to the original directory that is being
     |          copied, src_path is a sub dir of this path.  Example if src_path
     |          is /home/glafleur/players/roster/elite_habs2023.txt
     |          and the src_root_dir is /home/glafleur/players and the ostore_path
     |          is /backup/guy then the calculated ostore_path will be:
     |          /backup/guy/roster/elite_habs2023.txt
     |      :type src_path: str
     |      :param prepend_bucket: default is true, identifies if the name of the
     |          bucket should be the leading part of the destination path
     |      :type prepend_bucket: bool
     |      :param include_leading_slash: if the path should include a leading path
     |          delimiter character.  Example if true /guyLafleur/somedir
     |          would be the path, if set to false it would be guyLafleur/somedir
     |      :type include_leading_slash: bool
     |  
     |  rreemmoovvee__ssrr__rroooott__ddiirr(self, in_path, src_root_dir)
     |      a utility method that will recieve a path, and remove a leading portion
     |      of that path.  For example if the input path was
     |      `/habs/guy/lafleur/points`
     |      
     |      and the source root directory src_root_dir was `/habs/guy`
     |      
     |      The output path would be `lafleur/points`
     |      
     |      :param in_path: the input path that is to have the root directory
     |          removed
     |      :type in_path: str
     |      :raises ValueError: raise if the the in_path is found to not be a
     |          subdirectory of the SRC_ROOT_DIR (env var)
     |      :return: modified src directory with the root potion removed
     |      :rtype: str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OObbjjeeccttSSttoorreeDDiirreeccttoorryySSyynncc(ObjectStoreUtil)
     |  ObjectStoreDirectorySync(src_dir, dest_dir, obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None)
     |  
     |  Method resolution order:
     |      ObjectStoreDirectorySync
     |      ObjectStoreUtil
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, src_dir, dest_dir, obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None)
     |      [summary]
     |      
     |      :param obj_store_host: [if provided will use this as the object storage
     |                           host, if not will use the host described in the
     |                           environment variable: OBJ_STORE_HOST]
     |      :type obj_store_host: [type], optional
     |      :param obj_store_user: [description], defaults to None
     |      :type obj_store_user: [type], optional
     |      :param obj_store_secret: [description], defaults to None
     |      :type obj_store_secret: [type], optional
     |  
     |  cchheecckk__mmuullttiippaarrtt__eettaagg(self, localFile, etagFromDest)
     |      checks to see if the etag from S3 can be validated locally
     |      
     |      :param localFile: path to the local file
     |      :type localFile: str
     |      :param etagFromDest: the etag that was returned from s3
     |      :type etagFromDest: str
     |      :return: a boolean that tells us if the etag can be validated
     |      :rtype: bool
     |  
     |  uuppddaattee__oossttoorree__ddiirr(self, src_dir=None, dest_dir=None, delete=False, public=False, obj_store_bucket: str = None)
     |      Recursive copy of directory contents to object store.
     |      
     |      Iterates over all the files and directoris in the 'src_dir' parameter,
     |      when the iteration finds a directory it calls itself with that
     |      directory
     |      
     |      does a file list of the dest_dir in object store... only copies files
     |      if the equivalent destination file does not already exist in object
     |      storage.
     |      
     |      :param src_dir: input directory that is to be copied
     |      :type src_dir: str
     |      :param dest_dir: destination directory that is to be copied
     |      :type dest_dir: str
     |      :param delete: after file has been copied whether to delete the local
     |          version or not
     |      :type delete: bool
     |      :param public: whether to make the destination file a public object or
     |         not.  If set to true the url path to the object will be public/read
     |         permissions.  If false will require the secrets to be able to view
     |         the file.
     |      :type public: bool
     |      :param obj_store_bucket: override the bucket destination.  If use this
     |          parameter the bucket needs to accessible by the same credentials
     |          used to setup the minio/boto3 client
     |      :param obj_store_bucket: str
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ObjectStoreUtil:
     |  
     |  ccrreeaatteeBBoottooCClliieenntt(self, obj_store_user=None, obj_store_secret=None, obj_store_host=None)
     |      Checks to see if a boto connection has been made, if not then
     |      uses the following constants to build the connection:
     |      
     |      Treat this as a private method.  Any other methods that need a boto
     |      client will call this first.
     |      
     |      client id:      constants.OBJ_STORE_USER
     |      client secret:  constants.OBJ_STORE_SECRET
     |      s3 host:        constants.OBJ_STORE_HOST
     |  
     |  ddeelleettee__ddiirreeccttoorryy(self, ostore_dir, obj_store_bucket=None)
     |      deletes all the objects inside the directory
     |  
     |  ddeelleettee__rreemmoottee__ffiillee(self, dest_file, obj_store_bucket=None)
     |      deletes a remote file
     |      
     |      :param dest_file: path to the remote file that is to be deleted
     |  
     |  ggeett__ffoorrccee__ddoowwnnllooaadd__hheeaaddeerrss(self, object_name)
     |  
     |  ggeett__oobbjj__pprrooppss__aass__ddiicctt(self, in_object)
     |      Gets an object, iterates over the properties... any properties that
     |      do not start with a '_' are copied to a dict.  Not recursive, ie
     |      if properties are objects, then will just create an entry in the
     |      dictionary with value=object.
     |      
     |      :param inObject: The input object that is to be converted to a
     |                       dictionary
     |      :type inObject: obj
     |      :return: dictionary of the input object
     |      :rtype: dict
     |  
     |  ggeett__oobbjjeecctt(self, file_path, local_path, bucket_name=None)
     |      extracts an object from object store to a location on the
     |      filesystem where code is being run.
     |      
     |      :param filePath: path to an object in objectstore
     |      :type filePath: str, path
     |      :param localPath: The path where the object should be copied to on
     |                        the local file system
     |      :type localPath: str, path
     |      :param bucketName: name of the bucket where the object is located, if
     |                         not provided uses the bucket that is identified in
     |                         the environment variable OBJ_STORE_BUCKET
     |      :type bucketName: str
     |  
     |  ggeett__oobbjjeecctt__pprrooppeerrttiieess(self, object_name, bucket_name=None)
     |  
     |  ggeett__pprreessiiggnneedd__uurrll(self, object_name, object_bucket=None, expires=3600, headers=None)
     |      Gets the name of an object and returns the presigned url
     |      
     |      :param objectName: object name / key that exists in the object store
     |      :type objectName: str
     |  
     |  ggeett__ppuubblliicc__ppeerrmmiissssiioonn(self, object_name, bucket_name)
     |      uses the boto3 module to communicate with the S3 service and retrieve
     |      the ACL's.  Parses the acl and return the permission that is associated
     |      with public access.
     |      
     |      :param objectName: name of the object who's permissions are to be
     |                         retrieved
     |      :type objectName: str
     |      :raises ValueError: error raise if more than one
     |      :return: the permission that is associated with public access to the
     |               object if no public permission has been defined then returns
     |               None.
     |      :rtype: str
     |      
     |      following is an example of the 'Grants' property of the object that is
     |      returned by the get_object_acl method
     |      
     |      Grants': [
     |          {
     |              'Grantee':
     |                  {'DisplayName': 'nr-wrf-prd',
     |                  'ID': 'nr-wrf-prd',
     |                  Type': 'CanonicalUser'},
     |              'Permission': 'FULL_CONTROL'
     |          },
     |         {
     |             'Grantee':
     |                  {'Type': 'Group',
     |                  'URI': 'http://acs.amazonaws.com/groups/global/AllUsers'},
     |              'Permission': 'READ'}]
     |          }
     |      
     |      ^^ where Grantee / Type is Group, URI is ALLUsers is what the method
     |      is looking for.  Also only expecting a single record that meets those
     |      criteria
     |  
     |  lliisstt__oobbjjeeccttss(self, objstore_dir=None, recursive=True, return_file_names_only=False)
     |      lists the objects in the object store.  Run's recursive, if
     |      inDir arg is provided only lists objects that fall under that
     |      directory
     |      
     |      :param inDir: The input directory who's objects are to be listed
     |                    if no value is provided will list all objects in the
     |                    bucket
     |      :type inDir: str
     |      :return: list of the object names in the bucket
     |      :rtype: list
     |  
     |  lloogg__oobbjjeecctt__pprrooppeerrttiieess(self, in_object)
     |      write to the log the properties / values of the specified
     |      object
     |      
     |      :param inObject: gets a python object and writes the property / values
     |                       to the debug log
     |      :type inObject: obj
     |  
     |  ppuutt__oobbjjeecctt(self, ostore_path, local_path, bucket_name=None, public=False)
     |      just a wrapper method around the minio fput.  Makes it a
     |      little easier to call.
     |      
     |      :param localPath: the path to the file in the locally accessible file
     |                        system
     |      :type localPath: str
     |      :param destPath: the path in the object storage where the file should
     |                       be written.
     |      :type destPath:
     |      :param bucketName: [], defaults to None
     |      :type bucketName: [type], optional
     |  
     |  sseett__ppuubblliicc__ppeerrmmiissssiioonnss(self, object_name, bucket_name=None)
     |      Sets the input object that exists in object store to be public
     |      Read.
     |      
     |      Using boto3 to accomplish this, but suspect that there is another way
     |      to do this, possibly interacting directly with the object store api.
     |      
     |      The following post: https://github.com/aws/aws-sdk-ruby/issues/2129
     |      suggests that you might be able to set the object as read when the
     |      data is uploaded by adding the parameter:
     |      
     |              x-amz-acl = public-read
     |      
     |      
     |      https://stackoverflow.com/questions/67315838/upload-images-as-image-jpeg-mime-type-from-flutter-to-s3-bucket/67848626#67848626
     |      
     |      :param objectName: [description]
     |      :type objectName: [type]
     |  
     |  ssttaatt__oobbjjeecctt(self, object_name, bucket_name=None)
     |      runs stat on an object in the object store, returns the stat object
     |      
     |      :param objectName: name of the object to run stat on
     |      :type objectName: str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ObjectStoreUtil:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class OObbjjeeccttSSttoorreeUUttiill(builtins.object)
     |  ObjectStoreUtil(obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None, tmpfolder=None)
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, obj_store_host=None, obj_store_user=None, obj_store_secret=None, obj_store_bucket=None, tmpfolder=None)
     |      [summary]
     |      
     |      :param obj_store_host: [if provided will use this as the object storage
     |                           host, if not will use the host described in the
     |                           environment variable: OBJ_STORE_HOST]
     |      :type obj_store_host: [type], optional
     |      :param obj_store_user: [description], defaults to None
     |      :type obj_store_user: [type], optional
     |      :param obj_store_secret: [description], defaults to None
     |      :type obj_store_secret: [type], optional
     |  
     |  ccrreeaatteeBBoottooCClliieenntt(self, obj_store_user=None, obj_store_secret=None, obj_store_host=None)
     |      Checks to see if a boto connection has been made, if not then
     |      uses the following constants to build the connection:
     |      
     |      Treat this as a private method.  Any other methods that need a boto
     |      client will call this first.
     |      
     |      client id:      constants.OBJ_STORE_USER
     |      client secret:  constants.OBJ_STORE_SECRET
     |      s3 host:        constants.OBJ_STORE_HOST
     |  
     |  ddeelleettee__ddiirreeccttoorryy(self, ostore_dir, obj_store_bucket=None)
     |      deletes all the objects inside the directory
     |  
     |  ddeelleettee__rreemmoottee__ffiillee(self, dest_file, obj_store_bucket=None)
     |      deletes a remote file
     |      
     |      :param dest_file: path to the remote file that is to be deleted
     |  
     |  ggeett__ffoorrccee__ddoowwnnllooaadd__hheeaaddeerrss(self, object_name)
     |  
     |  ggeett__oobbjj__pprrooppss__aass__ddiicctt(self, in_object)
     |      Gets an object, iterates over the properties... any properties that
     |      do not start with a '_' are copied to a dict.  Not recursive, ie
     |      if properties are objects, then will just create an entry in the
     |      dictionary with value=object.
     |      
     |      :param inObject: The input object that is to be converted to a
     |                       dictionary
     |      :type inObject: obj
     |      :return: dictionary of the input object
     |      :rtype: dict
     |  
     |  ggeett__oobbjjeecctt(self, file_path, local_path, bucket_name=None)
     |      extracts an object from object store to a location on the
     |      filesystem where code is being run.
     |      
     |      :param filePath: path to an object in objectstore
     |      :type filePath: str, path
     |      :param localPath: The path where the object should be copied to on
     |                        the local file system
     |      :type localPath: str, path
     |      :param bucketName: name of the bucket where the object is located, if
     |                         not provided uses the bucket that is identified in
     |                         the environment variable OBJ_STORE_BUCKET
     |      :type bucketName: str
     |  
     |  ggeett__oobbjjeecctt__pprrooppeerrttiieess(self, object_name, bucket_name=None)
     |  
     |  ggeett__pprreessiiggnneedd__uurrll(self, object_name, object_bucket=None, expires=3600, headers=None)
     |      Gets the name of an object and returns the presigned url
     |      
     |      :param objectName: object name / key that exists in the object store
     |      :type objectName: str
     |  
     |  ggeett__ppuubblliicc__ppeerrmmiissssiioonn(self, object_name, bucket_name)
     |      uses the boto3 module to communicate with the S3 service and retrieve
     |      the ACL's.  Parses the acl and return the permission that is associated
     |      with public access.
     |      
     |      :param objectName: name of the object who's permissions are to be
     |                         retrieved
     |      :type objectName: str
     |      :raises ValueError: error raise if more than one
     |      :return: the permission that is associated with public access to the
     |               object if no public permission has been defined then returns
     |               None.
     |      :rtype: str
     |      
     |      following is an example of the 'Grants' property of the object that is
     |      returned by the get_object_acl method
     |      
     |      Grants': [
     |          {
     |              'Grantee':
     |                  {'DisplayName': 'nr-wrf-prd',
     |                  'ID': 'nr-wrf-prd',
     |                  Type': 'CanonicalUser'},
     |              'Permission': 'FULL_CONTROL'
     |          },
     |         {
     |             'Grantee':
     |                  {'Type': 'Group',
     |                  'URI': 'http://acs.amazonaws.com/groups/global/AllUsers'},
     |              'Permission': 'READ'}]
     |          }
     |      
     |      ^^ where Grantee / Type is Group, URI is ALLUsers is what the method
     |      is looking for.  Also only expecting a single record that meets those
     |      criteria
     |  
     |  lliisstt__oobbjjeeccttss(self, objstore_dir=None, recursive=True, return_file_names_only=False)
     |      lists the objects in the object store.  Run's recursive, if
     |      inDir arg is provided only lists objects that fall under that
     |      directory
     |      
     |      :param inDir: The input directory who's objects are to be listed
     |                    if no value is provided will list all objects in the
     |                    bucket
     |      :type inDir: str
     |      :return: list of the object names in the bucket
     |      :rtype: list
     |  
     |  lloogg__oobbjjeecctt__pprrooppeerrttiieess(self, in_object)
     |      write to the log the properties / values of the specified
     |      object
     |      
     |      :param inObject: gets a python object and writes the property / values
     |                       to the debug log
     |      :type inObject: obj
     |  
     |  ppuutt__oobbjjeecctt(self, ostore_path, local_path, bucket_name=None, public=False)
     |      just a wrapper method around the minio fput.  Makes it a
     |      little easier to call.
     |      
     |      :param localPath: the path to the file in the locally accessible file
     |                        system
     |      :type localPath: str
     |      :param destPath: the path in the object storage where the file should
     |                       be written.
     |      :type destPath:
     |      :param bucketName: [], defaults to None
     |      :type bucketName: [type], optional
     |  
     |  sseett__ppuubblliicc__ppeerrmmiissssiioonnss(self, object_name, bucket_name=None)
     |      Sets the input object that exists in object store to be public
     |      Read.
     |      
     |      Using boto3 to accomplish this, but suspect that there is another way
     |      to do this, possibly interacting directly with the object store api.
     |      
     |      The following post: https://github.com/aws/aws-sdk-ruby/issues/2129
     |      suggests that you might be able to set the object as read when the
     |      data is uploaded by adding the parameter:
     |      
     |              x-amz-acl = public-read
     |      
     |      
     |      https://stackoverflow.com/questions/67315838/upload-images-as-image-jpeg-mime-type-from-flutter-to-s3-bucket/67848626#67848626
     |      
     |      :param objectName: [description]
     |      :type objectName: [type]
     |  
     |  ssttaatt__oobbjjeecctt(self, object_name, bucket_name=None)
     |      runs stat on an object in the object store, returns the stat object
     |      
     |      :param objectName: name of the object to run stat on
     |      :type objectName: str
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

DDAATTAA
    LLOOGGGGEERR = <Logger NRUtil.NRObjStoreUtil (WARNING)>
    nnaammee = 'NRUtil.NRObjStoreUtil'

FFIILLEE
    /home/kysiemen/nr-rfc-dischargeobs/venv/lib/python3.10/site-packages/NRUtil/NRObjStoreUtil.py

